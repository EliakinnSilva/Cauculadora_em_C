#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <locale.h>

#define TAM_MAX 30

struct contato {
    char nome[50];
    char telefone[15];
};

void cadastrarContato(struct contato agenda[], int *numContatos, FILE *arquivo) {
    if (*numContatos < TAM_MAX) {
        struct contato novoContato;
        printf("Digite o nome do contato: ");
        scanf("%s", novoContato.nome);
        printf("Digite o telefone do contato: ");
        scanf("%s", novoContato.telefone);
        
        agenda[*numContatos] = novoContato;
        (*numContatos)++;
        
        fprintf(arquivo, "%s,%s\n", novoContato.nome, novoContato.telefone);
        
        printf("Contato cadastrado com sucesso!\n");
    } else {
        printf("A agenda está cheia. Não é possível cadastrar mais contatos.\n");
    }
}

void buscarContato(struct contato agenda[], int numContatos, char nomeBusca[], int imprimirInfo) {
    int inicio = 0;
    int fim = numContatos - 1;
    int meio;
    int encontrado = 0;
    
    while (inicio <= fim) {
        meio = (inicio + fim) / 2;
        
        if (strcmp(agenda[meio].nome, nomeBusca) == 0) {
            encontrado = 1;
            break;
        } else if (strcmp(agenda[meio].nome, nomeBusca) < 0) {
            inicio = meio + 1;
        } else {
            fim = meio - 1;
        }
    }
    
    if (encontrado) {
        printf("Contato encontrado:\n");
        printf("Nome: %s\n", agenda[meio].nome);
        printf("Telefone: %s\n", agenda[meio].telefone);
        
        if (imprimirInfo) {
            printf("\nInformações adicionais sobre o contato:\n");
            // Aqui você pode adicionar mais informações sobre o contato
        }
    } else {
        printf("Contato não encontrado.\n");
    }
}

void editarContato(struct contato agenda[], int numContatos, char nomeBusca[]) {
    int i;
    for (i = 0; i < numContatos; i++) {
        if (strcmp(agenda[i].nome, nomeBusca) == 0) {
            printf("Contato encontrado:\n");
            printf("Nome: %s\n", agenda[i].nome);
            printf("Telefone: %s\n", agenda[i].telefone);
            
            printf("\nDigite as novas informações:\n");
            printf("Novo nome: ");
            scanf("%s", agenda[i].nome);
            printf("Novo telefone: ");
            scanf("%s", agenda[i].telefone);
            
            printf("Contato editado com sucesso!\n");
            return;
        }
    }
    
    printf("Contato não encontrado.\n");
}

void excluirContato(struct contato agenda[], int *numContatos, char nomeBusca[]) {
    int i, j;
    int encontrado = 0;
    
    for (i = 0; i < *numContatos; i++) {
        if (strcmp(agenda[i].nome, nomeBusca) == 0) {
            encontrado = 1;
            
            printf("Contato encontrado:\n");
            printf("Nome: %s\n", agenda[i].nome);
            printf("Telefone: %s\n", agenda[i].telefone);
            
            // Remover o contato movendo os elementos subsequentes para trás
            for (j = i; j < *numContatos - 1; j++) {
                agenda[j] = agenda[j + 1];
            }
            
            (*numContatos)--;
            printf("Contato excluído com sucesso!\n");
            break;
        }
    }
    
    if (!encontrado) {
        printf("Contato não encontrado.\n");
    }
}

void exportarAgenda(struct contato agenda[], int numContatos, const char *nomeArquivo) {
    FILE *arquivo = fopen(nomeArquivo, "w");
    
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    
    int i;
    for (i = 0; i < numContatos; i++) {
        fprintf(arquivo, "%s,%s\n", agenda[i].nome, agenda[i].telefone);
    }
    
    fclose(arquivo);
    
    printf("Agenda exportada com sucesso!\n");
}

void importarAgenda(struct contato agenda[], int *numContatos, const char *nomeArquivo) {
    FILE *arquivo = fopen(nomeArquivo, "r");
    
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    
    char linha[100];
    char *nome, *telefone;
    
    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        nome = strtok(linha, ",");
        telefone = strtok(NULL, "\n");
        
        if (nome != NULL && telefone != NULL) {
            strcpy(agenda[*numContatos].nome, nome);
            strcpy(agenda[*numContatos].telefone, telefone);
            (*numContatos)++;
        }
    }
    
    fclose(arquivo);
    
    printf("Agenda importada com sucesso!\n");
}

int main() {
    struct contato agenda[TAM_MAX];
    int numContatos = 0;
    int opcao;
    char nomeBusca[50];
    
    while (1) {
        printf("\nAgenda Telefônica\n");
        printf("1 - Cadastrar contato\n");
        printf("2 - Buscar contato\n");
        printf("3 - Editar contato\n");
        printf("4 - Excluir contato\n");
        printf("5 - Exportar agenda\n");
        printf("6 - Importar agenda\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        
        switch (opcao) {
            case 1:
                cadastrarContato(agenda, &numContatos, stdout);
                break;
            case 2:
                printf("Digite o nome do contato a ser buscado: ");
                scanf("%s", nomeBusca);
                buscarContato(agenda, numContatos, nomeBusca, 1);
                break;
            case 3:
                printf("Digite o nome do contato a ser editado: ");
                scanf("%s", nomeBusca);
                editarContato(agenda, numContatos, nomeBusca);
                break;
            case 4:
                printf("Digite o nome do contato a ser excluído: ");
                scanf("%s", nomeBusca);
                excluirContato(agenda, &numContatos, nomeBusca);
                break;
            case 5:
                exportarAgenda(agenda, numContatos, "agenda.txt");
                break;
            case 6:
                importarAgenda(agenda, &numContatos, "agenda.txt");
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida.\n");
        }
        
        if (opcao == 0) {
            break;
        }
    }
    
    return 0;
}
